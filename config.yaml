---
# Enable verbose mode (print DEBUG log messages)
verbose: true

# Should the bot endlessly looop through the URLs?
# Between each loop it waits for <sleeping_time> seconds.
# Note that Ebay will (temporarily) block your IP if you
# poll too often - don't lower this below 600 seconds if you
# are crawling Ebay.
loop:
    active: yes
    sleeping_time: 600

# Location of the Database to store already seen offerings
# Defaults to the current directory
#database_location: /path/to/database

# List the URLs containing your filter properties below.
# Currently supported services: www.immobilienscout24.de,
# www.immowelt.de, www.wg-gesucht.de, and www.ebay-kleinanzeigen.de.
# List the URLs in the following format:
# urls:
# 	- https://www.immobilienscout24.de/Suche/...
# 	- https://www.wg-gesucht.de/...
urls:
  - https://www.immobilienscout24.de/Suche/shape/wohnung-mieten?shape=dWRuX0lnZGFwQX5tQF9dcEV9WmREaVJ2bEJxc0Z4eUBlZUloc0B1akRyQWl3Q3NSaWpCZWZAd2dAeWxEdWFCc19CaUN3eUBqcEBnb0RqfEdtSWxzRWZiQHZfQ2BqQGBqQXJBfHdGfm1AeGxEZmJAflw.&numberofrooms=1.5-&price=-1500.0&livingspace=35.0-&pricetype=rentpermonth&sorting=2
  - https://www.immowelt.de/liste/berlin/wohnungen/mieten?ami=40&d=true&pma=1300&r=5&rmi=2&sd=DESC&sf=TIMESTAMP&sp=1
  - https://www.wg-gesucht.de/wohnungen-in-Berlin.8.2.1.0.html?csrf_token=7ce1c298a5d9c714fc2ad5a7e6c05a4d2075a22a&offer_filter=1&city_id=8&sort_column=0&sort_order=0&noDeact=1&dTo=1669849200&categories%5B%5D=2&rent_types%5B%5D=2&sMin=35&rMax=1400&ot%5B%5D=126&ot%5B%5D=85077&ot%5B%5D=132&ot%5B%5D=151&ot%5B%5D=153&ot%5B%5D=85084&ot%5B%5D=163&ot%5B%5D=171&ot%5B%5D=178&ot%5B%5D=183&ot%5B%5D=85094&exc=2&kit=1
  - https://www.ebay-kleinanzeigen.de/s-wohnung-mieten/berlin/anzeige:angebote/preis::1300/wohnung/k0c203l3331r10+wohnung_mieten.qm_d:35.00%2C+wohnung_mieten.swap_s:nein+wohnung_mieten.verfuegbarm_i:10%2C+wohnung_mieten.verfuegbary_i:2022%2C+wohnung_mieten.zimmer_d:2.0%2C


# Define filters to exclude flats that don't meet your criterea.
# Supported filters include 'max_rooms', 'min_rooms', 'max_size', 'min_size',
#   'max_price', 'min_price', and 'excluded_titles'.
#
# 'excluded_titles' takes a list of regex patterns that match against
# the title of the flat. Any matching titles will be excluded.
# More to Python regex here: https://docs.python.org/3/library/re.html
#
# Example:
filters:
 excluded_titles:
   - "wg"
   - "zwischenmiete"
   - "WBS"
   - "Untermiete"
   - "Wohnungstausch"
   - "swap"
   - "Tausch"
#   min_price: 700
#   max_price: 1000
#   min_size: 50
#   max_size: 80
#   max_price_per_square: 1000
#filters:

# There are often city districts in the address which
# Google Maps does not like. Use this blacklist to remove
# districts from the search.
#blacklist:
#  - Innenstadt

# If an expose includes an address, the bot is capable of
# displaying the distance and time to travel (duration) to
# some configured other addresses, for specific kinds of
# travel.
#  
# Available kinds of travel ('gm_id') can be found in the
# Google Maps API documentation, but basically there are:
# 	- "bicycling"
#	- "transit" (public transport)
#	- "driving"
#   - "walking"
# 
# The example configuration below includes a place for
# "John", located at the main train station of munich.
# Two kinds of travel (bicycle and transit) are requested,
# each with a different label. Furthermore a place for
# "Jane" is included, located at the given destination and
# with the same kinds of travel.
#durations:
#    - name: John
#      destination: Hauptbahnhof, München
#      modes:
#          - gm_id: transit
#            title: "Öff."
#          - gm_id: bicycling
#            title: "Rad"

# Multiline message (yes, the | is supposed to be there), 
# to format the message received from the Telegram bot. 
# 
# Available placeholders:
# 	- {title}: The title of the expose
#	- {rooms}: Number of rooms
#	- {price}: Price for the flat
# 	- {durations}: Durations calculated by GMaps, see above
#	- {url}: URL to the expose
message: |
    {title}
    Zimmer: {rooms}
    Größe: {size}
    Preis: {price}
    Ort: {address}

    {url}

# Calculating durations requires access to the Google Maps API. 
# Below you can configure the URL to access the API, with placeholders.
# The URL should most probably just kept like that. 
# To use the Google Maps API, an API key is required. You can obtain one
# without costs from the Google App Console (just google for it).
# Additionally, to enable the API calls in the code, set the 'enable' key to True
google_maps_api:
    key: YOUR_API_KEY
    url: https://maps.googleapis.com/maps/api/distancematrix/json?origins={origin}&destinations={dest}&mode={mode}&sensor=true&key={key}&arrival_time={arrival}
    enable: False

# If you are planning to scrape immoscout24.de, the bot will need 
# to circumvent the sites captcha protection by using a captcha 
# solving service. Register at either imagetypers or 2captcha 
# (the former is prefered), desposit some funds, uncomment the 
# corresponding lines below and replace your API key/token.
# Use driver_arguments to provide options for Chrome WebDriver.
captcha:
    imagetyperz:
         token: E2D5BDC025AA44208DC22DFAA9526B09
    driver_arguments:
     - "--headless"
#    2captcha:
#         api_key: alskdjaskldjfklj

# You can select whether to be notified by telegram or via a mattermost
# webhook. For all notifiers selected here a configuration must be provided
# below.
notifiers:
   - telegram
#   - mattermost

# Sending messages using Telegram requires a Telegram Bot configured. 
# Telegram.org offers a good documentation about how to create a bot.
# Once you read it, will make sense. Still: bot_token should hold the
# access token of your bot and receiver_ids should list the client ids
# of receivers. Note that those receivers are required to already have
# started a conversation with your bot. 
#
telegram:
   bot_token: 5648920225:AAH3jqSkYXbNYb5gMIIh89RGeGRVcvdBENc
   receiver_ids:
       - 388259993

# Sending messages via mattermost requires a webhook url provided by a
# mattermost server. You can find a description how to set up a webhook with
# the official mattermost documentation:
# https://docs.mattermost.com/developer/webhooks-incoming.html
# mattermost:
#   webhook_url: https://mattermost.example.com/signup_user_complete/?id=abcdef12356

# If you are running the web interface, you can configure Login with Telegram support
# Follow the instructions here to register your domain with the Telegram bot:
# https://core.telegram.org/widgets/login
#
# website:
#    bot_name: bot_name_xxx
#    domain: flathunter.example.com
#    session_key: SomeSecretValue
#    listen:
#      host: 127.0.0.1
#      port: 8080

# If you are deploying to google cloud,
# uncomment this and set it to your project id. More info in the readme.
# google_cloud_project_id: my-flathunters-project-id

# For websites like idealista.it, there are anti-crawler measures that can be
# circumvented using proxies.
# use_proxy_list: True

# do you wish to automatically submit applications?
auto_submit:
  enable: False
  login_immoscout:
    username: 'philtrigu@gmail.com'
    password: 'Kw*2I10l^u8exE'
  login_immowelt:
    username: 'philtrigu@gmail.com'
    password: 'LhpH$&yAqLEBHT9y'
  login_ebay:
    username: 'philtrigu@gmail.com'
    password: 's87I%%lu@hijUELR'
  login_wggesucht:
    username: 'philtrigu@gmail.com'
    password: 'a$GM375RnTLjJx5E'
  contact_text_file: 'contact_text.txt'

